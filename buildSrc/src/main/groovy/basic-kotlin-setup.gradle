plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'io.gitlab.arturbosch.detekt'
    id 'jacoco'
}

repositories {
    mavenCentral()
}

sourceSets {
    // Define the name of the new source set as 'integrationTest'
    integrationTest {
        // Includes the compiled main code when compiling integration tests.
        compileClasspath += sourceSets.main.output
        // Includes the compiled main code when running integration tests.
        runtimeClasspath += sourceSets.main.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom implementation
    integrationTestRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'io.github.oshai:kotlin-logging-jvm:_'

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.hamcrest:hamcrest:_'
}

def jacocoExclusions = []

test {
    useJUnitPlatform()
    jacoco {
        excludes = jacocoExclusions
    }
}

tasks.register('integrationTest', Test) {
    useJUnitPlatform()
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
}

kotlin {
    jvmToolchain(21)
}

detekt {
    config.setFrom('../etc/detekt/detekt-config.yml')
    buildUponDefaultConfig = true
}

def consolidateJaCoCo = { task ->
    configure(task) {
        dependsOn test, integrationTest
        executionData fileTree(project.layout.buildDirectory).include('jacoco/*.exec')
        afterEvaluate {
            classDirectories.setFrom files(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclusions)
            })
        }
    }
}

jacocoTestReport {
    consolidateJaCoCo(it)
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

ext.jacocoVerification = { task, minInstructionCoverage, maxMissedClasses ->
    consolidateJaCoCo(task)
    configure(task) {
        violationRules {
            rule {
                limit {
                    counter = 'INSTRUCTION'
                    value = 'COVEREDRATIO'
                    minimum = minInstructionCoverage
                }
                limit {
                    counter = 'CLASS'
                    value = 'MISSEDCOUNT'
                    maximum = maxMissedClasses
                }
            }
        }
    }
}

// Trigger JaCoCo checks which depends on both test and integrationTest tasks
check.dependsOn jacocoTestReport, jacocoTestCoverageVerification